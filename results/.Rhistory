df_1 <- read_csv("withObs_falsenumSamples50_numTimeSteps1200_numRandomDoubles10_numPeople700_timeStamp1530100873362.csv", col_names = FALSE)
library(tidyverse)
library(reshape2)
library(scales)
library(RColorBrewer)
library(gridExtra)
library(lattice)
setwd("//ds.leeds.ac.uk/staff/staff7/geomadc/Docs/Project2/java_projects/keanu")
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
library(tidyverse)
library(reshape2)
library(scales)
library(RColorBrewer)
library(gridExtra)
library(lattice)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
matrix_cols <- function(i, data, len) {
vec <- rep(0, len)
df <- data[[i]]
for(j in 1:len) {
m <- match(j, unlist(df[,1]))
if(!is.na(m)) {
#print(m)
vec[j] <- df[m, 2]
}
}
#print(vec)
return(unlist(vec))
}
df_1 <- read_csv("withObs_falsenumSamples50_numTimeSteps1200_numRandomDoubles10_numPeople700_timeStamp1530100873362.csv", col_names = FALSE)
df_means_1 <- map(1:ncol(df_1), function(x) mean(unlist(df_1[,x])))
df_1 <- read_csv("withObs_falsenumSamples50_numTimeSteps1200_numRandomDoubles10_numPeople700_timeStamp1530100873362.csv", col_names = FALSE)
# no obs
samples_no_obs <- read_csv("Samples_OBSERVEfalseobInterval0_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
truth_no_obs <- read_csv("Truth_OBSERVEfalseobInterval0_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
library(tidyverse)
library(scales)
library(RColorBrewer)
library(gridExtra)
library(reshape2)
library(lattice)
spag_plot <- function(samples, truth, obs) {
x_axis <- 1:ncol(samples)
sample_col <- alpha("#ADD8E6", 0.9)
truth_col <- "red"
sample_col <- brewer.pal(9, "Blues")
#create plot
plot(1, xlim=c(0, max(x_axis)), ylim=c(0, max(samples)), type='l', xlab="Number of iterations", ylab = "Number of agents",
main = paste("Number of agents in simulation \n as sampled from posterior (obs = ", obs, ")", sep = ""))
print(max(x_axis))
map(1:nrow(samples), function(x) {lines(x_axis, samples[x,], type='l', col=sample_col[x / 10])
print(sample_col[x / 10])})
lines(x_axis, truth, type='l', lwd=2.5, col = truth_col)
# confidence intervals
#lines()
legend("bottomright", c("Samples", "Truth"), lty=c(1,1), lwd=c(2.5,2.5),col=c(sample_col[4], truth_col))
}
matrix_cols <- function(i, data, len) {
vec <- rep(0, len)
df <- data[[i]]
for(j in 1:len) {
m <- match(j, unlist(df[,1]))
if(!is.na(m)) {
#print(m)
vec[j] <- df[m, 2]
}
}
#print(vec)
return(unlist(vec))
}
dist_plot <- function(samples) {
counts <- map(samples, function(x) type_convert(as.tibble(table(x))))
m <- map(1:length(counts), matrix_cols, counts, max(samples))
m <- matrix(unlist(m), ncol=length(counts))
colours = c("white", brewer.pal(9,"YlOrRd"))
heatmap(m, Colv = NA, Rowv = NA, col=colours, breaks = c(0,1,2,3,4,5,6,7,8,9,10), main="Distribution of people in simulation as sampled from posterior (no obs)")
}
# no obs
samples_no_obs <- read_csv("Samples_OBSERVEfalseobInterval0_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
truth_no_obs <- read_csv("Truth_OBSERVEfalseobInterval0_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
spag_plot(samples_no_obs, truth_no_obs, FALSE)
spag_plot <- function(samples, truth, obs) {
x_axis <- 1:ncol(samples)
sample_col <- alpha("#ADD8E6", 0.9)
truth_col <- "red"
sample_col <- brewer.pal(9, "Blues")
#create plot
plot(1, xlim=c(0, max(x_axis)), ylim=c(0, max(samples)), type='l', xlab="Number of iterations", ylab = "Number of agents",
main = paste("Number of agents in simulation \n as sampled from posterior (obs = ", obs, ")", sep = ""))
print(max(x_axis))
map(1:nrow(samples), function(x) {lines(x_axis, samples[x,], type='l', col=sample_col[x / 3])
print(sample_col[x / 10])})
lines(x_axis, truth, type='l', lwd=2.5, col = truth_col)
# confidence intervals
#lines()
legend("bottomright", c("Samples", "Truth"), lty=c(1,1), lwd=c(2.5,2.5),col=c(sample_col[4], truth_col))
}
spag_plot(samples_no_obs, truth_no_obs, FALSE)
# with obs
samples_with_obs <- read_csv("Samples_OBSERVEtrueobInterval1_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
truth_with_obs <- read_csv("Samples_OBSERVEtrueobInterval1_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
spag_plot(samples_with_obs, truth_with_obs, TRUE)
# with obs
samples_with_obs <- read_csv("Samples_OBSERVEtrueobInterval1_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
truth_with_obs <- read_csv("Truth_OBSERVEtrueobInterval1_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
spag_plot(samples_with_obs, truth_with_obs, TRUE)
par(mfrow=c(2,1))
# no obs
samples_no_obs <- read_csv("Samples_OBSERVEfalseobInterval0_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
truth_no_obs <- read_csv("Truth_OBSERVEfalseobInterval0_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
spag_plot(samples_no_obs, truth_no_obs, FALSE)
# with obs
samples_with_obs <- read_csv("Samples_OBSERVEtrueobInterval1_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
truth_with_obs <- read_csv("Truth_OBSERVEtrueobInterval1_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
spag_plot(samples_with_obs, truth_with_obs, TRUE)
par(mfrow=c(1,2))
# no obs
samples_no_obs <- read_csv("Samples_OBSERVEfalseobInterval0_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
truth_no_obs <- read_csv("Truth_OBSERVEfalseobInterval0_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
spag_plot(samples_no_obs, truth_no_obs, FALSE)
# with obs
samples_with_obs <- read_csv("Samples_OBSERVEtrueobInterval1_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
truth_with_obs <- read_csv("Truth_OBSERVEtrueobInterval1_numSamples100_numTimeSteps1000_numRandomDoubles10_totalNumPeople700_dropSamples0_downSample_sigmaNoise0.1_downsample3_timeStamp1532077346294.csv", col_names = FALSE)
spag_plot(samples_with_obs, truth_with_obs, TRUE)
# and distributions (needs tweaking)
dist_plot(samples_no_obs)
library(tidyverse)
library(gtools)
library(tidyverse)
library(reshape2)
library(scales)
library(RColorBrewer)
library(gridExtra)
library(lattice)
vec <- rep(0, len)
matrix_cols <- function(i, data, len) {
vec <- rep(0, len)
df <- data[[i]]
for(j in 1:len) {
m <- match(j, unlist(df[,1]))
if(!is.na(m)) {
#print(m)
vec[j] <- df[m, 2]
}
}
#print(vec)
return(unlist(vec))
}
dist_plot <- function(samples) {
counts <- map(samples, function(x) type_convert(as.tibble(table(x))))
m <- map(1:length(counts), matrix_cols, counts, max(samples))
m <- matrix(unlist(m), ncol=length(counts))
colours = c("white", brewer.pal(9,"YlOrRd"))
heatmap(m, Colv = NA, Rowv = NA, col=colours, breaks = c(0,1,2,3,4,5,6,7,8,9,10), main="Distribution of people in simulation as sampled from posterior (no obs)")
}
library(tidyverse)
library(gtools)
dataDir = "./plot"
#Find files
samples_files <- grep("Samples_OBSERVE", list.files(path = dataDir), value=TRUE)
truth_file <-  grep("Truth", list.files(path = dataDir), value=TRUE)
#Ensure files are in correct order (mixed sort includes numerical sorting of embeded numbers)
samples_files <- mixedsort(unlist(samples_files))
# Read all the files in
samples <- map(samples_files, function(x) read_csv(paste("7000samples/", x, sep=""), col_names = FALSE))
truth <- read_csv(truth_file[1], col_names = FALSE)
truth <- read_csv(paste("7000samples/", truth_file[1], sep=""), col_names = FALSE)
# This should be greped instead
obIntervals <- c(0,1,5,10)
# plot all
par(mfrow=c(2,2))
map2(samples, obIntervals, function(x, obInterval) spag_plot(x, truth, obInterval))
#Summary stats
samples_Summary <- function(df, obInterval) {
df <- as.data.frame(df)
mean_range <- mean(apply(df, 2, function(x) max(x) - min(x)))
median_range <-  median(apply(df, 2, function(x) max(x) - min(x)))
mean_IQR <- mean(apply(df, 2, function(x) IQR(x)))
median_IQR <- median(apply(df, 2, function(x) IQR(x)))
mean_sd <- mean(apply(df, 2, function(x) sd(x)))
median_sd <- median(apply(df, 2, function(x) sd(x)))
data.frame(observation_Interval=obInterval,
mean_sd=mean_sd, median_sd=median_sd,
mean_IQR=mean_IQR, median_IQR=median_IQR,
mean_range=mean_range, median_range=median_range
)
}
summaryStats <- do.call("rbind", map2(samples, obIntervals, samples_Summary))
summaryStats
dataDir = "./plot"
dataDir = "./plot"
#Find files
samples_files <- grep("Samples_OBSERVE", list.files(path = dataDir), value=TRUE)
truth_file <-  grep("Truth", list.files(path = dataDir), value=TRUE)
#Ensure files are in correct order (mixed sort includes numerical sorting of embeded numbers)
samples_files <- mixedsort(unlist(samples_files))
# Read all the files in
samples <- map(samples_files, function(x) read_csv(paste("7000samples/", x, sep=""), col_names = FALSE))
truth <- read_csv(truth_file[1], col_names = FALSE)
dataDir = "./plot"
#Find files
samples_files <- grep("Samples_OBSERVE", list.files(path = dataDir), value=TRUE)
truth_file <-  grep("Truth", list.files(path = dataDir), value=TRUE)
samples_files
dataDir = "./plot"
#Find files
samples_files <- grep("Samples_OBSERVE", list.files(path = dataDir), value=TRUE)
truth_file <-  grep("Truth", list.files(path = dataDir), value=TRUE)
#Find files
samples_files <- grep("Samples_obInterval", list.files(path = dataDir), value=TRUE)
truth_file <-  grep("Truth", list.files(path = dataDir), value=TRUE)
#Ensure files are in correct order (mixed sort includes numerical sorting of embeded numbers)
samples_files <- mixedsort(unlist(samples_files))
# Read all the files in
samples <- map(samples_files, function(x) read_csv(paste("7000samples/", x, sep=""), col_names = FALSE))
# Read all the files in
samples <- map(samples_files, function(x) read_csv(paste("plot/", x, sep=""), col_names = FALSE))
truth <- read_csv(truth_file[1], col_names = FALSE)
truth <- read_csv(paste("7000samples/", truth_file[1], sep=""), col_names = FALSE)
# This should be greped instead
obIntervals <- c(0,1,10,100)
# plot all
par(mfrow=c(2,2))
map2(samples, obIntervals, function(x, obInterval) spag_plot(x, truth, obInterval))
# Read all the files in
samples <- map(samples_files, function(x) read_csv(paste("plot/", x, sep=""), col_names = FALSE))
truth <- read_csv(truth_file[1], col_names = FALSE)
truth <- read_csv(paste("plot/", truth_file[1], sep=""), col_names = FALSE)
# Read all the files in
samples <- map(samples_files, function(x) read_csv(paste("plot/", x, sep=""), col_names = FALSE))
truth <- read_csv(truth_file[1], col_names = FALSE)
# Read all the files in
samples <- map(samples_files, function(x) read_csv(paste("plot/", x, sep=""), col_names = FALSE))
truth <- read_csv(paste("plot/", truth_file[1], sep=""), col_names = FALSE)
# This should be greped instead
obIntervals <- c(0,1,10,100)
# plot all
par(mfrow=c(2,2))
map2(samples, obIntervals, function(x, obInterval) spag_plot(x, truth, obInterval))
